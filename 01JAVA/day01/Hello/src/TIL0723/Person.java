package TIL0723;

public class Person {
	String name;
	int age;
	String hobby;
	
	//기능. 그런데 매개변수는 없다.
	public void info() {
		System.out.printf("나의 이름은 %s입니다. %n나이는 %d입니다. 취미는 %s입니다.", name, age, hobby);
	}
	
	//기능. 매개변수가 있다.
	//매개변수는 묵시적 형변환(자동 형변환)을 이용하여 전달됨.
	//데이터가 더 작은 친구가 더 큰친구로 자연스럽게 변경된다. 데이터 손실이 없으니까!
	//마찬가지로 반환타입(return된 데이터의 타입)도 결과를 받아서 쓸 때 묵시적 형변환이 가능하다.
	void study(int time) {
		//int time =?(호출 시 넘겨준 값);
		System.out.println(time + "시간만큼 공부했습니다.");
	}	
	
	short bb() {
		return 20;
	}
	
	//가변인자
//	메서드에서 매개변수 개수를 가변적으로 받을 수 있다.
//	배열처럼 처리되지만 호출 시 배열을 명시적으로 생성할 필요 없다.
//	항상 가변인자는 "마지막"에 위치해야함.
//	하나의 메서드에 여러 개의 가변 인자 사용 불가하다.
	//리턴타입 메서드이름(타입...변수명){
	//내부적으로 변수명은 배열처럼 사용 가능
	//}
	
	
	
	//메서드 오버로딩
//	메서드의 이름이 같고 매개변수가 다른 메서드를 여러개 정의
//	중복코드에 대한 효율적 관리 가능
//	파라미터의 개수또는 순서, 타입이 달라야하낟.(파라미터의 이름만 다른것은 x)
//	리턴 타입이 다른것의 의미x
	void study(long time) {
		
	}
	void study(double time) {
		
	}
	void study(int time1, int time2) {
		
	}
//	void study(int time2, int time1) {
//		
//	} 이놈은 바로 위에 있는 놈이랑 똑같다. 컴파일러는 아 int형 두개가 있구나!만 알고있다. 쓰면에러남.
	void study (String str, int time) {
	}
	void study (int time, String str) {
	}//이건 위에 있는거랑 같이 써도 된다. 파라미터의 순서가 다르니까 
	
	
	
	
	//생성자
	객체 생성시 호출되는 메서드. 필드 초기화나 생성시 필요한 작업 수행
	클래스 이름과 같고, 반환타입이 없다.(void도 안씀)
	new키워드 사용. 자바에서 기본 생성자(매개변수 없는)자동으로 제공. 
	매개변수 개수가 다르건 자료형이 다른 여러개의 생성자가 오버로딩이 가능.
	생성자의 첫 라인으로 this()생성자로 또다른 생성자 호출 가능
}
